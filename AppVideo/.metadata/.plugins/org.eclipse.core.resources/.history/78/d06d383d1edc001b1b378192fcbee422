package umu.tds.controlador;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.ListItem;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.property.UnitValue;
import umu.tds.componente.ListaCanciones;
import umu.tds.dao.*;
import umu.tds.modelo.Cancion;
import umu.tds.modelo.CatalogoCanciones;
import umu.tds.modelo.CatalogoUsuarios;
import umu.tds.modelo.ListaReproduccion;
import umu.tds.modelo.Usuario;

public class AppMusic {
	
	//Instancia del controlador
	private static AppMusic unicaInstancia = null;
	private Usuario usuarioActual; //En el dominio no se accede a usuario desde controlador
	private FactoriaDAO factoria;
	public static final int MIN_PASSLENGTH = 8;
    
	//Inicializacion del controlador obteniendo la FactoriaDAO
	private AppMusic() {
		usuarioActual = null;
		try {
			factoria = FactoriaDAO.getInstancia();
		} catch (DAOException e) {
			e.printStackTrace();
		}
	}
	
	// Aplicamos el patrón Singleton.
	// Consiguiendo de esta forma que exista una única instancia de la clase
	// controlador que es accesible globalmente.
	public static AppMusic getInstancia() {
		if (unicaInstancia == null)
			unicaInstancia = new AppMusic();
		return unicaInstancia;
	}

	//Función login para que los usuarios puedan acceder desde el launcher principal a la aplicacion 
	public boolean login(String username, String clave) {
		Usuario usuario = CatalogoUsuarios.getUnicaInstancia().getUsuario(username);
		if (usuario != null && usuario.getPassword().equals(clave)) {
			this.usuarioActual = usuario;
			return true;
		}
		return false;
	}

	//Funcion para comprobar si un usuario esta o no registrado en el sistema
	public boolean esUsuarioRegistrado(String login) {
		return CatalogoUsuarios.getUnicaInstancia().getUsuario(login) != null;
	}
	
	//Función de registro para que los usuarios puedan registrarse en el sistema
	public boolean registrarUsuario(String nombre, String apellidos, String login, String clave, String mail,
			String fecha) {
		if(esUsuarioRegistrado(login)) return false;
		Usuario usuario = new Usuario(nombre, apellidos, login, clave, mail, fecha);

		UsuarioDAO usuarioDAO = factoria.getUsuarioDAO(); /* Adaptador DAO para almacenar el nuevo Usuario en la BD */
		usuarioDAO.create(usuario);

		CatalogoUsuarios.getUnicaInstancia().addUsuario(usuario);
		return true;
	}
	
	//Función para cargar el repertorio de canciones al entrar a la aplicación
	public void cargarCanciones() throws DAOException {
		ListaCanciones listaCanciones = new ListaCanciones();
		//ListaReproduccion nuevasCanciones = new ListaReproduccion();
		
		listaCanciones.addListaCancionesListener(CatalogoCanciones.getUnicaInstancia());
		
		List<umu.tds.componente.Cancion> lista = listaCanciones.getCanciones();
		for(umu.tds.componente.Cancion c : lista) {
			Cancion cancion = new Cancion(c.getTitulo(), c.getInterprete(), 
											c.getEstilo(), c.getURL());
			if(!CatalogoCanciones.getUnicaInstancia().getCanciones().contains(cancion) 
					 && !CatalogoCanciones.getUnicaInstancia().isCancionRegistered(cancion.getTitulo())) {
				System.out.println("Se añade la cancion: " + cancion.getTitulo() + " al Catalogo");
				CatalogoCanciones.getUnicaInstancia().addCancion(cancion);	
				cancionAPersitencia(cancion);
			}	
		}
		listaCanciones.setCanciones(lista);
	}
	
	public void cancionAPersitencia(Cancion cancionNueva) throws DAOException{
		//Se guarda la lista en persistencia
		CancionDAO cDAO = factoria.getCancionDAO();
		cDAO.create(cancionNueva);
	}
	
	//Función para que los usuarios puedan registrar una lista de canciones
	public void registrarLista(String nombre, List<String> Canciones) throws DAOException{
		ListaReproduccion lista = buscarLista(nombre);
		if(lista!=null) {
			editarLista(nombre, Canciones);
		}else {
			lista = new ListaReproduccion(nombre);
			for (int i = 0; i<Canciones.size();i++){
				String Cancion = Canciones.get(i);
				Cancion c = CatalogoCanciones.getUnicaInstancia().getCancionWithTitulo(Cancion);
				if(c!=null) lista.añadirCancion(c.getId());
				else JOptionPane.showMessageDialog(null, "La cancion buscada para registrar la lista no existe");
			}
			//Se guarda la lista en persistencia
			ListaReproduccionDAO listaDAO = factoria.getListaReproduccionDAO();
			listaDAO.create(lista);
			//Se asocia la lista al usuario que la creo
			getUsuarioActual().addIdListasReproduccion(lista.getId());
			UsuarioDAO usuarioDAO = factoria.getUsuarioDAO();
			usuarioDAO.updatePerfil(getUsuarioActual());
		}
	}
	
	public void editarLista(String nombre, List<String> canciones) throws DAOException{
		ListaReproduccion lista = buscarLista(nombre);
		if(lista!=null) {
			ArrayList<String> idCanciones = new ArrayList<String>();
			for(String titulo : canciones) {
				idCanciones.add(buscarCancionWithTitulo(titulo).getId());
			}
			lista.setListaReproduccion(idCanciones);
	
			//Se guarda la lista en persistencia
			ListaReproduccionDAO listaDAO = factoria.getListaReproduccionDAO();
			listaDAO.updatePerfil(lista);
		}else {
			JOptionPane.showMessageDialog(null, "La lista de reproduccion buscada no existe");
		}
	}
	
	//Función para que los usuarios puedan convertirse en premium
	public void convertirPremium(){
		usuarioActual.setPremium("si");

		UsuarioDAO usuarioDAO = factoria.getUsuarioDAO(); 
		usuarioDAO.updatePerfil(usuarioActual);
	}
	
	//Función para que los usuarios puedan cambiar su correo electronico
	public void cambiarCorreo(String correo){
		usuarioActual.setEmail(correo);
		UsuarioDAO usuarioDAO = factoria.getUsuarioDAO(); 
		usuarioDAO.updatePerfil(usuarioActual);
	}
	
	//Función para que los usuarios puedan cambiar su contraseña
	public void cambiarPass(String pass){
		if(pass.length()< MIN_PASSLENGTH) {
			JOptionPane.showMessageDialog(null, "Error al intentar cambiar la contraseña, la contraseña debe tener al menos "+MIN_PASSLENGTH+" caracteres");
		}else {
			usuarioActual.setPassword(pass);
			UsuarioDAO usuarioDAO = factoria.getUsuarioDAO(); 
			usuarioDAO.updatePerfil(usuarioActual);
		}
	}
	
	//Función para obtener el usuario actual
	public Usuario getUsuarioActual() {
		return usuarioActual;
	}

	//Función para establecer el usuario actual
	public void setUsuarioActual(Usuario usuarioActual) {
		this.usuarioActual = usuarioActual;
	}

	//Función para buscar un usuario
	public Usuario buscarUsuario(String nombreUsuario) {
		return CatalogoUsuarios.getUnicaInstancia().getUsuario(nombreUsuario);
	}
	
	//Función para buscar un cancion
	public Cancion buscarCancionWithID(String id) {
		Cancion c = CatalogoCanciones.getUnicaInstancia().getCancionWithID(id);
		if(c != null)return c;
		else{
			JOptionPane.showMessageDialog(null, "La cancion "+ id +" buscada no existe");
			return null;
		}
	}
	
	//Función para buscar un cancion con el titulo
	public Cancion buscarCancionWithTitulo(String nombreCancion) {
		Cancion c = CatalogoCanciones.getUnicaInstancia().getCancionWithTitulo(nombreCancion);
		if(c != null)return c;
		else{
			JOptionPane.showMessageDialog(null, "La cancion "+ nombreCancion +" buscada no existe");
			return null;
		}
	}
	
	//Busca en una lista y devuelve la cancion en string
    public String buscarCancionListaConID(String idCancion) throws DAOException {
        Cancion c = CatalogoCanciones.getUnicaInstancia().getCancionWithID(idCancion);
        if(c != null) return c.getInterprete() + "-" + c.getTitulo();
        else{
        	JOptionPane.showMessageDialog(null, "La cancion con ID: "+ idCancion +" buscada no existe");
        	return "Sin interprete-Sin titulo";
        }
    }
    
  //Busca en una lista y devuelve la cancion en string
    public String buscarCancionListaConTitulo(String titulo) throws DAOException {
        Cancion c = CatalogoCanciones.getUnicaInstancia().getCancionWithTitulo(titulo);
        if(c != null) return c.getInterprete() + "-" + c.getTitulo();
        else{
        	JOptionPane.showMessageDialog(null, "La cancion con Titulo: "+ titulo +" buscada no existe");
        	return "Sin interprete-Sin titulo";
        }
    }
	
	//Función para obtener canciones
	public List<String> getCanciones(String interprete, String titulo, String estilo) throws DAOException {
		List<Cancion> canciones = CatalogoCanciones.getUnicaInstancia().getCanciones();
		List<String> resultado = new LinkedList<String>();
		for(Cancion c: canciones){
			String interp = c.getInterprete();
			String tit = c.getTitulo();
			String est = c.getEstilo();
			if(interp != null && tit != null && est != null){
			if (interp.contains(interprete) || tit.contains(titulo) || est.equals(estilo)){
				String resul = (interp +"-"+ tit);
				resultado.add(resul);
			}}
		}
		return resultado;
	}
	
	//Funcion que devuelve una lista de reproduccion guardada en base de datos
	public ListaReproduccion getListaReproduccion(String id) {
		ListaReproduccionDAO listaReproduccionDAO = factoria.getListaReproduccionDAO();
		return listaReproduccionDAO.get(Integer.parseUnsignedInt(id));
	}
	
	//Función para obtener todas las listas de reproduccion que peretencen al usuario actual
	public List<ListaReproduccion> getListas() {
		List<ListaReproduccion> listasReproduccion = new ArrayList<ListaReproduccion>();
		for(String id : getUsuarioActual().getIdListasReproduccion()) {
			listasReproduccion.add(getListaReproduccion(id));
		}
		return listasReproduccion;
	}
	
	//Función para buscar una lista de reproduccion
	public ListaReproduccion buscarLista(String nombreLista)  throws DAOException {
		for(ListaReproduccion l : getListas()) {
			if(l.getTitulo().equals(nombreLista)) {
				return l;
			}
		}
		return null;
	}

	//Comprueba si existe una lista con ese nombre
	public boolean comprobarNombreLista(String nombre) {
		for(ListaReproduccion l : getListas()) {
			if(l.getTitulo().equals(nombre)) {
				return true;
			}
		}
		return false;
	}

	//Función para añadir reproduccion a lista de mas escuchadas
	public void addReproduccion(Cancion cancionSeleccionada) {
		this.usuarioActual.addMasEscuchadas(cancionSeleccionada.getTitulo());
		UsuarioDAO usuarioDAO = factoria.getUsuarioDAO(); 
		usuarioDAO.updatePerfil(usuarioActual);
	}
	//Función para añadir reproduccion a lista de mas escuchadas
	public void addReciente(Cancion cancionSeleccionada) {
		this.usuarioActual.addMasRecientes(cancionSeleccionada.getTitulo());
		UsuarioDAO usuarioDAO = factoria.getUsuarioDAO(); 
		usuarioDAO.updatePerfil(usuarioActual);
	}
	
	//Función para obtener el precio para el usuario actual
	public double getPrecio() {
		return usuarioActual.getPrecio();
	}
	
	//Función para cerrar la sesion del usuario actual
	public void cerrarSesion() {
		usuarioActual = null;
	}

	//Función para obtener las canciones mas escuchadas por el usuario
	public Map<String, Integer> getMasEscuchadasUsuario() {
		final Map<String, Integer> s = this.usuarioActual.getMasEscuchadas().entrySet()
                .stream()
                .sorted(Map.Entry.comparingByValue())
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
		return s;
	}
	
	//Función para obtener las 10 últimas canciones añadidas a la lista de canciones mas recientes
	public List<String> getMasRecientesUsuario() {
		ArrayList<String> recientes = this.usuarioActual.getMasRecientes();
		List<String> l = recientes.stream().distinct().collect(Collectors.toList());
		for (String s:l){
			System.out.println(s);
		}
		List<String> tail = l.subList(Math.max(l.size() - 10, 0), l.size());
		return tail;
	}
		
	
	//Función para generar el pdf
	//Le pasamos la ruta donde se tiene que guardar el archivo y el nombre del archivo
	//A la ruta le ponemos \\ en vez de 1 y añadimos el nombre en el PDFWriter
	//Da un error SLF4J pero es normal, el pdf se genera bien
	public void generarPDF(File file) throws FileNotFoundException, DAOException, MalformedURLException{
		//https://kb.itextpdf.com/home/it7kb/ebooks/itext-7-jump-start-tutorial-for-java/
		List<String> titulos = new ArrayList<String>();
		for(ListaReproduccion l : getListas()) {
			titulos.add(l.getTitulo());
		}
		String doubleSlashed = file.getAbsolutePath().replaceAll("\\\\", "\\\\\\\\");
		PdfWriter writer = new PdfWriter(doubleSlashed+"\\listadoAppMusic.pdf");
		PdfDocument pdf = new PdfDocument(writer);
		Document document = new Document(pdf);
		// Create a PdfFont
		//PdfFont font = PdfFontFactory.createFont(FontConstants.TIMES_ROMAN);
		// Add a Paragraph
		Image logo = new Image(ImageDataFactory.create(AppMusic.class.getResource("/umu/tds/imagenes/Music_29918.png")));

		document.add(new Paragraph("AppMusic, generacion de listas y sus canciones:").add(logo));
		if(titulos.size()==0) {
			document.add(new Paragraph("No hay listas creadas"));
			document.close();
			return;
		}
		// Create a List
		com.itextpdf.layout.element.List list;
		
		for(String lista : titulos){
		list = new com.itextpdf.layout.element.List();
		// Add ListItem objects
		list.add(new ListItem(lista));
		// Add the list
		document.add(list);
		Table table = new Table(new float[]{4, 4, 4});
		table.setWidth(UnitValue.createPercentValue(100));
		
		table.addHeaderCell(new Cell().add(new Paragraph("Interprete")));
		table.addHeaderCell(new Cell().add(new Paragraph("Titulo")));
		table.addHeaderCell(new Cell().add(new Paragraph("Estilo")));
		
		ArrayList<String> canciones = buscarLista(lista).getListaReproduccion();
		for(String id:canciones){
			String titulo = buscarCancionWithID(id).getTitulo();
			String autor = buscarCancionWithID(id).getInterprete();
			String estilo = buscarCancionWithID(id).getEstilo();
			table.addCell(new Cell().add(new Paragraph(autor)));
			table.addCell(new Cell().add(new Paragraph(titulo)));
			table.addCell(new Cell().add(new Paragraph(estilo)));
		}
		
		document.add(table);
		}
		document.close();
	}
}
