package umu.tds.vista;

import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import java.awt.Dimension;
import javax.swing.DefaultListModel;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JMenu;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.JProgressBar;
import javax.swing.border.MatteBorder;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import umu.tds.controlador.AppMusic;
import umu.tds.dao.DAOException;
import umu.tds.modelo.Cancion;
import umu.tds.modelo.ListaReproduccion;
import javax.swing.JToggleButton;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JLabel;
import java.awt.GridBagConstraints;
import javax.swing.JScrollPane;
import java.awt.SystemColor;
import javax.swing.JList;
import javax.swing.ImageIcon;
import javax.swing.border.SoftBevelBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.border.BevelBorder;

public class VentanaAppMusic extends JFrame{

	private static final long serialVersionUID = 1L;

	private JFrame frmAppmusic;
	private JPanel contentPane;
	private JScrollPane Panel_ListasReproduccion;
	private MediaPlayer mediaPlayer;
	private String nombredelaLista;
	
	/**
	 * Create the frame.
	 */
	public VentanaAppMusic() {
		initialize();
	}
	
	public void mostrarVentana() {
		frmAppmusic.setLocationRelativeTo(null);
		frmAppmusic.setVisible(true);
	}
	
	/**
	 * Initialize the contents of the frame.
	 */
	public void initialize() {
		frmAppmusic = new JFrame();
		frmAppmusic.setTitle("AppMusic");
		frmAppmusic.setIconImage(Toolkit.getDefaultToolkit()
				.getImage(VentanaLogin.class.getResource("/umu/tds/imagenes/Music_29918.png")));
		frmAppmusic.setResizable(false);
		frmAppmusic.setBackground(Color.WHITE);
		setSize(new Dimension(1600, 900));
		setPreferredSize(new Dimension(1600, 900));
		frmAppmusic.getContentPane().setBackground(Color.WHITE);
		frmAppmusic.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setIconImage(Toolkit.getDefaultToolkit()
				.getImage(VentanaRegistro.class.getResource("/umu/tds/imagenes/Music_29918.png")));
		
		frmAppmusic.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				goToVentanaLogin();
			}
		});
		
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				goToVentanaLogin();
			}
		});
		
		
		JMenuBar menuBar = new JMenuBar();
		menuBar.setBorder(new SoftBevelBorder(BevelBorder.LOWERED, null, null, null, null));
		menuBar.setBackground(SystemColor.control);
		setJMenuBar(menuBar);
		
		JMenu mnNewMenu = new JMenu("Inicio");
		mnNewMenu.setMargin(new Insets(2, 2, 2, 5));
		menuBar.add(mnNewMenu);
		
		JMenuItem mntmNewMenuItem = new JMenuItem("Recientes");
		mntmNewMenuItem.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				
			}
		});
		mnNewMenu.add(mntmNewMenuItem);
		
		JMenuItem mntmNewMenuItem_1 = new JMenuItem("Perfil");
		mntmNewMenuItem_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {			
				VentanaAjustes ajustes = new VentanaAjustes();
				ajustes.setVisible(true);
				
			}
		});
		mnNewMenu.add(mntmNewMenuItem_1);
		
		JMenuItem mntmNewMenuItem_2 = new JMenuItem("Cerrar sesion");
		mntmNewMenuItem_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				AppMusic.getInstancia().cerrarSesion();
				VentanaLogin login = new VentanaLogin();
				login.mostrarVentana();
				getVentanaAppMusic().dispose();
				
			}
		});
		
		mnNewMenu.add(mntmNewMenuItem_2);
		
		DefaultListModel<Object> modelo = new DefaultListModel<Object>();
	
		JButton miMusica = new JButton("Mi Musica");
		miMusica.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				List<ListaReproduccion> listas = AppMusic.getInstancia().getListas();
				if(listas==null)System.out.println("No hay listas");
				else{
				for(ListaReproduccion s : listas){
					if(!modelo.contains(s.getTitulo())){
					modelo.addElement(s.getTitulo());
				}}
				}
			}
		});
		menuBar.add(miMusica);
		
		JButton Explorar = new JButton("Explorar");
		Explorar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				VentanaExplorar explorar = new VentanaExplorar();
				explorar.setVisible(true);
			}
		});
		menuBar.add(Explorar);
		
		JButton MasEscuchadas = new JButton("MÃ¡s escuchadas");
		
		menuBar.add(MasEscuchadas);
				
		contentPane = new JPanel();
		contentPane.setMinimumSize(new Dimension(0, 0));
		contentPane.setBackground(Color.LIGHT_GRAY);
		setContentPane(contentPane);
		contentPane.setLayout(new BorderLayout(0, 0));
		
		JToolBar toolBar = new JToolBar();
		toolBar.setPreferredSize(new Dimension(13, 60));
		toolBar.setBorder(null);
		toolBar.setAlignmentY(Component.CENTER_ALIGNMENT);
		contentPane.add(toolBar, BorderLayout.SOUTH);
		
		JPanel ReproductorMusica = new JPanel();
		ReproductorMusica.setBackground(new Color(192, 192, 192));
		ReproductorMusica.setFont(new Font("Unispace", Font.BOLD | Font.ITALIC, 14));
		ReproductorMusica.setSize(new Dimension(25, 25));
		ReproductorMusica.setPreferredSize(new Dimension(25, 25));
		toolBar.add(ReproductorMusica);
		ReproductorMusica.setLayout(new BorderLayout(0, 0));
		
		JPanel Medio = new JPanel();
		Medio.setBackground(new Color(255, 255, 255));
		ReproductorMusica.add(Medio, BorderLayout.CENTER);
		Medio.setLayout(new BorderLayout(0, 0));
		
		JPanel Centro = new JPanel();
		Centro.setBackground(new Color(255, 255, 255));
		Medio.add(Centro, BorderLayout.CENTER);
		Centro.setLayout(new BorderLayout(0, 0));
		
		JPanel PanelReproductor = new JPanel();
		PanelReproductor.setBackground(new Color(255, 255, 255));
		Centro.add(PanelReproductor, BorderLayout.NORTH);

		
		JToggleButton tglbtnNewToggleButton = new JToggleButton("Play");
		tglbtnNewToggleButton.setPreferredSize(new Dimension(50, 23));
		tglbtnNewToggleButton.setMargin(new Insets(0, 14, 2, 14));
		tglbtnNewToggleButton.setBorder(new MatteBorder(1, 1, 1, 1, (Color) new Color(0, 0, 0)));
		tglbtnNewToggleButton.setAlignmentX(0.5f);
		tglbtnNewToggleButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (mediaPlayer.getCurrentCount()==0){
					mediaPlayer.play();
					//ACCION BARRA
				}
			}
		});
		PanelReproductor.add(tglbtnNewToggleButton);
		
		JButton btnNewButton_5 = new JButton("Pausa");
		btnNewButton_5.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
					mediaPlayer.pause();
			}
		});
		PanelReproductor.add(btnNewButton_5);
		
		JButton btnNewButton = new JButton("Mas");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
					mediaPlayer.setVolume(mediaPlayer.getVolume()*1.10);
			}
		});
		PanelReproductor.add(btnNewButton);
		
		JButton btnNewButton_4 = new JButton("Menos");
		btnNewButton_4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
					mediaPlayer.setVolume(mediaPlayer.getVolume()*0.90);
			}
		});
		PanelReproductor.add(btnNewButton_4);
		
		JPanel BarraReproductor = new JPanel();
		BarraReproductor.setBackground(new Color(255, 255, 255));
		Centro.add(BarraReproductor, BorderLayout.SOUTH);
		
		JProgressBar progressBar = new JProgressBar();
		progressBar.setForeground(new Color(148, 0, 211));
		progressBar.setPreferredSize(new Dimension(400, 14));
		BarraReproductor.add(progressBar);
		
		JPanel Derecha = new JPanel();
		Derecha.setBackground(new Color(255, 255, 255));
		Derecha.setPreferredSize(new Dimension(200, 10));
		ReproductorMusica.add(Derecha, BorderLayout.EAST);
		Derecha.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		
		JPanel Izquierda = new JPanel();
		Izquierda.setBackground(new Color(255, 255, 255));
		Izquierda.setPreferredSize(new Dimension(200, 15));
		ReproductorMusica.add(Izquierda, BorderLayout.WEST);
		GridBagLayout gbl_Izquierda = new GridBagLayout();
		gbl_Izquierda.columnWidths = new int[]{0, 0, 0, 0};
		gbl_Izquierda.rowHeights = new int[]{2, 0, 0, 2, 0};
		gbl_Izquierda.columnWeights = new double[]{0.0, 0.0, 0.0, Double.MIN_VALUE};
		gbl_Izquierda.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		Izquierda.setLayout(gbl_Izquierda);
		
		JLabel lblNewLabel = new JLabel("NombreCancion");
		GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
		gbc_lblNewLabel.fill = GridBagConstraints.VERTICAL;
		gbc_lblNewLabel.insets = new Insets(0, 0, 5, 0);
		gbc_lblNewLabel.gridx = 2;
		gbc_lblNewLabel.gridy = 1;
		Izquierda.add(lblNewLabel, gbc_lblNewLabel);
		
		Panel_ListasReproduccion = new JScrollPane();
		Panel_ListasReproduccion.setVisible(false);
		Panel_ListasReproduccion.setBackground(new Color(255, 255, 255));
		Panel_ListasReproduccion.setPreferredSize(new Dimension(200, 2));
		Panel_ListasReproduccion.setVisible(true);
		
		contentPane.add(Panel_ListasReproduccion, BorderLayout.WEST);
		
		JLabel lblFondoAppMusic = new JLabel("");
		lblFondoAppMusic.setBorder(null);
		
		JPanel panel = new JPanel();
		contentPane.add(panel, BorderLayout.CENTER);
		
		JTextField nombreLista = new JTextField();
		nombreLista.setColumns(20);
		panel.add(nombreLista);
		
		JButton btnNewButton_3 = new JButton("Crear");
		
		
		JPanel panelLista = new JPanel();
		panel.add(panelLista,BorderLayout.CENTER);
		panelLista.setVisible(false);
		
		JPanel panel_1 = new JPanel();
		panel_1.setBackground(new Color(255, 255, 255));
		Panel_ListasReproduccion.setColumnHeaderView(panel_1);
		
		JButton btnAÃ±adirListaReproduccion = new JButton("Nueva lista de reproducciÃ³n");
		btnAÃ±adirListaReproduccion.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				lblFondoAppMusic.setVisible(false);
				panel.setVisible(true);
				panelLista.setVisible(false);
				nombreLista.setVisible(true);
				btnNewButton_3.setVisible(true);
				
			}
		});
		panel_1.add(btnAÃ±adirListaReproduccion);
		
		
		JList<Object> list = new JList<Object>();
		
		list.setModel(modelo);
		list.setBorder(null);
	
		
		
		
		//JScrollPane scrollPane1 = new JScrollPane(list);
		Panel_ListasReproduccion.setViewportView(list);
		
		
		
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				String nombre = nombreLista.getText();
				if(nombre==null || nombre.equals(""))return;
				try {
					if(AppMusic.getInstancia().comprobarNombreLista(nombre)){					
						JOptionPane.showMessageDialog(getVentanaAppMusic(), "Ya existe una lista con ese nombre "
								+ "Si continua se editarÃ¡", "Aviso", JOptionPane.INFORMATION_MESSAGE);
					}
					nombredelaLista = nombre;
				} catch (HeadlessException e) {
					e.printStackTrace();
				}
				VentanaListaEditar listaR = new VentanaListaEditar(nombre);
				listaR.setVisible(true);
				
			}
		});
		panel.add(btnNewButton_3);
		
			
		DefaultTableModel modelotabla = new DefaultTableModel(){
		    
			@Override
		       public boolean isCellEditable(int row, int column) {
		          //all cells false
		          return false;
		       }
		};
		JLabel titulo = new JLabel();
		JTable tabla = new JTable (modelotabla);
		list.addMouseListener(new MouseAdapter() {
			@Override public void mouseClicked(MouseEvent e){
				//mediaPlayer.stop();
				
				String nombre = list.getSelectedValue().toString();
				//Borramos la seleccion de la tabla para evitar bug
				tabla.clearSelection();
				if(e. getClickCount()==2){
					//	panel.setVisible(false);
					lblFondoAppMusic.setVisible(false);
					panelLista.setVisible(true);
					nombreLista.setVisible(false);
					btnNewButton_3.setVisible(false);
					
					ListaReproduccion lista;
					try {
						lista = AppMusic.getInstancia().buscarLista(nombre);
						//lista = AppMusic.getInstancia().buscarLista((String) list.getSelectedValue());
						titulo.setText(nombre);
						
						modelotabla.setRowCount(0);
						modelotabla.setColumnCount(0);
						modelotabla.addColumn("Interprete");
						modelotabla.addColumn("Titulo");
						
						
						for (String id : lista.getListaReproduccion()){
								String cancion = AppMusic.getInstancia().buscarCancionListaConID(id);
								
								String[] interYtitulo = cancion.split("-");
								
								modelotabla.addRow(interYtitulo);
						}	
					} catch (DAOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
			}
			});
		
		panelLista.add(titulo,BorderLayout.NORTH);
		JScrollPane scrollPane = new JScrollPane();
		panelLista.add(scrollPane, BorderLayout.CENTER);
		scrollPane.setViewportView(tabla);
		
		MasEscuchadas.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				lblFondoAppMusic.setVisible(false);
				nombreLista.setVisible(false);
				btnNewButton_3.setVisible(false);
				panelLista.setVisible(true);
				titulo.setText("Mas Escuchadas");
				tabla.clearSelection();
						
					modelotabla.setRowCount(0);
					modelotabla.setColumnCount(0);
					modelotabla.addColumn("Interprete");
					modelotabla.addColumn("Titulo");
					modelotabla.addColumn("Reproducciones");
					
					Map<String,Integer> m = 
							AppMusic.getInstancia().getMasEscuchadasUsuario();
					if(!m.isEmpty()){
					for (String s : m.keySet()){
							String cancion;
							try {
								cancion = AppMusic.getInstancia().buscarCancionListaConTitulo(s);
								cancion+="-"+m.get(s);
								String[] interYtitulo = cancion.split("-");
								modelotabla.addRow(interYtitulo);
								
							} catch (DAOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							
					}
					}
			}
		});
		
		mntmNewMenuItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				lblFondoAppMusic.setVisible(false);
				nombreLista.setVisible(false);
				btnNewButton_3.setVisible(false);
				panelLista.setVisible(true);
				titulo.setText("Mas Recientes");
				tabla.clearSelection();
						
					modelotabla.setRowCount(0);
					modelotabla.setColumnCount(0);
					modelotabla.addColumn("Interprete");
					modelotabla.addColumn("Titulo");
					
					List<String> m = 
							AppMusic.getInstancia().getMasRecientesUsuario();
					if(!m.isEmpty()){
						int cont = 0;
						for (String s : m){
							if (cont==10) {
								cont = 0;
								return;
							}
							cont++;
							String cancion;
							try {
								cancion = AppMusic.getInstancia().buscarCancionListaConTitulo(s);
								String[] interYtitulo = cancion.split("-");
								modelotabla.addRow(interYtitulo);
								
							} catch (DAOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							
					}
					}
			}
		});
		
		
		
		
		tabla.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
	        @Override
			public void valueChanged(ListSelectionEvent arg0) {
				// TODO Auto-generated method stub
	        	String titulo = (String) tabla.getValueAt(tabla.getSelectedRow(),1);
	        	
	        	Cancion cancionSeleccionada = AppMusic.getInstancia().buscarCancionWithTitulo(titulo);
	        	
	        	//Sumamos 1 a reproducciones de la cancion
	        	AppMusic.getInstancia().addReproduccion(cancionSeleccionada);
	        	
	        	//AÃ±adimos a lista de recientes
	        	AppMusic.getInstancia().addReciente(cancionSeleccionada);
	        	
	        	// activar reproductor
	        	if (mediaPlayer != null){
					mediaPlayer.stop();
				}
	        	
	        	try {
	        		com.sun.javafx.application.PlatformImpl.startup(()->{});
	        	} catch(Exception ex) {
	        		ex.printStackTrace();
	        		System.out.println("Exception: " + ex.getMessage());
	        	}
	        	// reproducir una canciÃ³n
	        	String fileName = cancionSeleccionada.getURL();
	        	Media hit = new Media(fileName);
	        	mediaPlayer = new MediaPlayer(hit);
	        	mediaPlayer.play();
	        	//ACCION BARRA
	        	lblNewLabel.setText(cancionSeleccionada.getInterprete()+cancionSeleccionada.getTitulo());
	        	lblNewLabel.validate();
	        	}
	    });
		
		
		
		lblFondoAppMusic.setIcon(new ImageIcon(VentanaAppMusic.class.getResource("/umu/tds/imagenes/fondoAppMusic.png")));
		contentPane.add(lblFondoAppMusic, BorderLayout.EAST);
	}
	
	
	public JFrame getVentanaAppMusic() {
		final JFrame ventana = this;
		return ventana;
	}
	
	private void goToVentanaLogin() {
		VentanaLogin login = new VentanaLogin();
		getVentanaAppMusic().dispose();
		login.mostrarVentana();
	}
}
